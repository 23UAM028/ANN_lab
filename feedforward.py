# -*- coding: utf-8 -*-
"""FeedForward.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tINMd6DsF3iCokLrQagMJO9EhaosEzQC
"""

import os
print(os.listdir())

!pip install openpyxl

import numpy as np
import pandas as pd

df=pd.DataFrame([[8,8,4],[7,9,5],[6,10,6],[5,12,7]],columns=['cgpa','profile_score','lpa'])
df.head()

def initialize_parameters(layer_dim):
  np.random.seed(3)
  print("Layer Dimension:",layer_dim)
  parameters={}
  L=len(layer_dim)
  print("Total no.of layer in NN:",L)
  for i in range(1,L):
    parameters['W'+str(i)]=np.ones((layer_dim[i-1],layer_dim[i]))*0.1
    parameters['B'+str(i)]=np.zeros((layer_dim[i],1))

  return parameters

params=initialize_parameters([2,2,1])
print(params)

def linear_forward(a_prev,w,b):
  Z=np.dot(w.T,a_prev)+b
  return Z

def activation_fun(Z):
  return np.maximum(0,Z)

def forward_layer(X,parameters):
  A=X
  caches=[]
  print("Parameters=",parameters)
  L=len(parameters)//2
  print(L)
  for i in range (1,L):
    A_prev=A
    w=parameters['W'+str(i)]
    b=parameters['B'+str(i)]
    Z=linear_forward(A_prev,w,b)
    A=activation_fun(Z)
    cache=(A_prev,w,b,Z)
    caches.append(cache)

    w_out=parameters['W'+str(L)]
    b_out=parameters['B'+str(L)]
    Z_out=linear_forward(A,w_out,b_out)
    AL=Z_out

    return AL,caches

X=df[['cgpa','profile_score']].values[0].reshape(2,1)
print(X)
parameters = initialize_parameters([2, 2, 1])
y_hat, caches = forward_layer(X, parameters)
print("Final output:")
print(y_hat)

"""Q.**Student Dataset**"""

import numpy as np
import pandas as pd

cols=['CGPA','10th Score','12th Score','IQ']
df=pd.read_excel('Student_dataset.xlsx',usecols=cols)

# initializing parameters
def init_parameters(layers_dimension):
  print(layers_dimension)
  L=len(layers_dimension)
  parameters={}
  for i in range (1,L):
    parameters['W'+str(i)]=np.ones((layers_dimension[i-1],layers_dimension[i]))*0.1
    parameters['b'+str(i)]=np.zeros((layers_dimension[i],1))

  return parameters


# feedforward propagation
def feed_forward(X,parameters):
  A=X
  caches=[]
  L=len(parameters)//2
  for i in range (1,L):
    A_prev=A
    W=parameters['W'+str(i)]
    b=parameters['b'+str(i)]
    Z=linear_forward(A_prev,W,b)
    A=ReLU(Z)
    cache=(A_prev,W,b,Z)
    caches.append(cache)

  # output layer
  W_out=parameters['W'+str(L)]
  b_out=parameters['b'+str(L)]
  Z_out=linear_forward(A,W_out,b_out)

  Y_pred=Z_out

  return Y_pred,caches

# summation function
def linear_forward(a_prev,W,b):
  Z=np.dot(W.T,a_prev)+b
  return Z

# activation function
def ReLU(Z):
  return np.maximum(0,Z)


# input features from excel file
X=df[['CGPA','10th Score','12th Score','IQ']].values.reshape(4,10)
# print(X)
# init parameters
input_features=X.shape[0]
parameters=init_parameters([input_features,4,3,1])
# forward propagation
pred_value,cache=feed_forward(X,parameters)
print("Predicted Value after Feedforward propagation=",pred_value)

import numpy as np
import pandas as pd

cols = ['CGPA', '10th Score', '12th Score', 'IQ']
df = pd.read_excel('Student_dataset.xlsx', usecols=cols)

# Initialize parameters
def init_parameters(layers_dimension):
    L = len(layers_dimension)
    parameters = {}
    for i in range(1, L):
        parameters['W' + str(i)] = np.ones((layers_dimension[i-1], layers_dimension[i])) * 0.1
        parameters['b' + str(i)] = np.zeros((layers_dimension[i], 1))
    return parameters

# Linear forward function
def linear_forward(a_prev, W, b):
    Z = np.dot(W.T, a_prev) + b
    return Z

# ReLU activation function
def ReLU(Z):
    return np.maximum(0, Z)

def sigmoid(Z_out):
  return 1/(1+np.exp(-Z_out))

# Feedforward propagation
def feed_forward(X, parameters):
    A = X
    caches = []
    L = len(parameters) // 2
    for i in range(1, L):
        A_prev = A
        W = parameters['W' + str(i)]
        b = parameters['b' + str(i)]
        Z = linear_forward(A_prev, W, b)
        A = ReLU(Z)
        cache = (A_prev, W, b, Z)
        caches.append(cache)

    # Output layer
    W_out = parameters['W' + str(L)]
    b_out = parameters['b' + str(L)]
    Z_out = linear_forward(A, W_out, b_out)
    out=sigmoid(Z_out)
    Y_pred = out
    return Y_pred, caches


X = df[['CGPA', '10th Score', '12th Score', 'IQ']].values.reshape(4,10)
print(X)
# Initialize parameters
input_dim = X.shape[0]
print(input_dim)
parameters = init_parameters([4,input_dim,1])
print(parameters)
print(len(parameters))
# Feedforward propagation
pred_value, cache = feed_forward(X, parameters)
print("Predicted Value after Feedforward propagation:\n", pred_value)



